"use strict";function NDTjs(e,t,s,r,n,o){this.server=e,this.serverPort=t||3001,this.serverPath=r||"/ndt_protocol",this.serverProtocol=s||"ws",this.updateInterval=o/1e3||!1,this.results={c2sRate:void 0,s2cRate:void 0},this.SEND_BUFFER_SIZE=1048576,void 0===n?this.callbacks={onstart:function(){return!1},onstatechange:function(){return!1},onprogress:function(){return!1},onfinish:function(){return!1},onerror:function(){return!1}}:this.callbacks=n,this.COMM_FAILURE=0,this.SRV_QUEUE=1,this.MSG_LOGIN=2,this.TEST_PREPARE=3,this.TEST_START=4,this.TEST_MSG=5,this.TEST_FINALIZE=6,this.MSG_ERROR=7,this.MSG_RESULTS=8,this.MSG_LOGOUT=9,this.MSG_WAITING=10,this.MSG_EXTENDED_LOGIN=11,this.NDT_MESSAGES=[],this.NDT_MESSAGES[this.COMM_FAILURE]="COMM_FAILURE",this.NDT_MESSAGES[this.SRV_QUEUE]="SRV_QUEUE",this.NDT_MESSAGES[this.MSG_LOGIN]="MSG_LOGIN",this.NDT_MESSAGES[this.TEST_PREPARE]="TEST_PREPARE",this.NDT_MESSAGES[this.TEST_START]="TEST_START",this.NDT_MESSAGES[this.TEST_MSG]="TEST_MSG",this.NDT_MESSAGES[this.TEST_FINALIZE]="TEST_FINALIZE",this.NDT_MESSAGES[this.MSG_ERROR]="MSG_ERROR",this.NDT_MESSAGES[this.MSG_RESULTS]="MSG_RESULTS",this.NDT_MESSAGES[this.MSG_LOGOUT]="MSG_LOGOUT",this.NDT_MESSAGES[this.MSG_WAITING]="MSG_WAITING",this.NDT_MESSAGES[this.MSG_EXTENDED_LOGIN]="MSG_EXTENDED_LOGIN"}NDTjs.prototype.logger=function(e,t){t=t||!1,t===!0&&console.log(e)},NDTjs.prototype.checkBrowserSupport=function(){if(void 0===self.WebSocket&&void 0===self.MozWebSocket)throw this.UnsupportedBrowser("No Websockets");return!0},NDTjs.prototype.makeLoginMessage=function(e){var t,s='XXX { "msg": "v3.5.5", "tests": "'+(16|e)+'" }',r=new Uint8Array(s.length);for(r[0]=this.MSG_EXTENDED_LOGIN,r[1]=0,r[2]=s.length-3,t=3;t<s.length;t+=1)r[t]=s.charCodeAt(t);return r},NDTjs.prototype.makeNdtMessage=function(e,t){var s,r,n;for(s='{ "msg": "'+t+'" } ',r=new Uint8Array(s.length+3),r[0]=e,r[1]=s.length>>8&255,r[2]=255&s.length,n=0;n<s.length;n+=1)r[n+3]=s.charCodeAt(n);return r},NDTjs.prototype.parseNdtMessage=function(e){var t,s=[],r=new Uint8Array(e),n=String.fromCharCode.apply(null,new Uint8Array(e.slice(3)));for(t=0;3>t;t+=1)s[t]=r[t];return s.push(n),s},NDTjs.prototype.ConnectionException=function(e){this.logger(e),this.callbacks.onerror(e)},NDTjs.prototype.UnsupportedBrowser=function(e){this.logger(e),this.callbacks.onerror(e)},NDTjs.prototype.TestFailureException=function(e){this.logger(e),this.callbacks.onerror(e)},NDTjs.prototype.createWebsocket=function(e,t,s,r,n){var o=new WebSocket(e+"://"+t+":"+s+r,n);return o.binaryType="arraybuffer",o},NDTjs.prototype.ndtC2sTest=function(){var e,t,s,r,n=new Uint8Array(this.SEND_BUFFER_SIZE),o=this,T="WAIT_FOR_TEST_PREPARE",S=0,a=o.updateInterval,i;for(r=0;r<n.length;r+=1)n[r]=32+101*r%94;return i=function(){var e=Date.now()/1e3;return t.bufferedAmount<8192&&(t.send(n),S+=n.length),o.updateInterval&&e>s+a&&(o.results.c2sRate=8*(S-t.bufferedAmount)/1e3/(e-s),o.callbacks.onprogress("interval_c2s",o.results),a+=o.updateInterval,e=Date.now()/1e3),s+10>e?void setTimeout(i,0):!1},function(r,n){return o.logger("CALLED C2S with "+r+" ("+o.NDT_MESSAGES[r]+") "+n.msg+" in state "+T),"WAIT_FOR_TEST_PREPARE"===T&&r===o.TEST_PREPARE?(o.callbacks.onstatechange("preparing_c2s",o.results),e=Number(n.msg),t=o.createWebsocket(o.serverProtocol,o.server,e,o.serverPath,"c2s"),T="WAIT_FOR_TEST_START",!1):"WAIT_FOR_TEST_START"===T&&r===o.TEST_START?(o.callbacks.onstatechange("running_c2s",o.results),s=Date.now()/1e3,i(),T="WAIT_FOR_TEST_MSG",!1):"WAIT_FOR_TEST_MSG"===T&&r===o.TEST_MSG?(o.results.c2sRate=Number(n.msg),o.logger("C2S rate calculated by server: "+o.results.c2sRate),T="WAIT_FOR_TEST_FINALIZE",!1):"WAIT_FOR_TEST_FINALIZE"===T&&r===o.TEST_FINALIZE?(o.callbacks.onstatechange("finished_c2s",o.results),T="DONE",!0):void o.logger("C2S: State = "+T+" type = "+r+"("+o.NDT_MESSAGES[r]+") message = ",n)}},NDTjs.prototype.ndtS2cTest=function(e){var t,s,r,n,o,T="WAIT_FOR_TEST_PREPARE",S=0,a=this.updateInterval,i=this;return function(_,E){if(i.logger("CALLED S2C with "+_+" ("+i.NDT_MESSAGES[_]+") in state "+T),"WAIT_FOR_TEST_PREPARE"===T&&_===i.TEST_PREPARE)return i.callbacks.onstatechange("preparing_s2c",i.results),t=Number(E.msg),s=i.createWebsocket(i.serverProtocol,i.server,t,i.serverPath,"s2c"),s.onopen=function(){i.logger("Successfully opened S2C test connection."),r=Date.now()/1e3},s.onmessage=function(e){var t,s;t=e.data.byteLength<126?2:e.data.byteLength<65536?4:10,S+=t+e.data.byteLength,s=Date.now()/1e3,i.updateInterval&&s>r+a&&(i.results.s2cRate=8*S/1e3/(s-r),i.callbacks.onprogress("interval_s2c",i.results),a+=i.updateInterval,s=Date.now()/1e3)},s.onerror=function(e){throw o=i.parseNdtMessage(e.data)[3].msg,i.TestFailureException(o)},T="WAIT_FOR_TEST_START",!1;if("WAIT_FOR_TEST_START"===T&&_===i.TEST_START)return i.callbacks.onstatechange("running_s2c",i.results),T="WAIT_FOR_FIRST_TEST_MSG",!1;if("WAIT_FOR_FIRST_TEST_MSG"===T&&_===i.TEST_MSG)return i.logger("Got message: "+JSON.stringify(E)),T="WAIT_FOR_TEST_MSG_OR_TEST_FINISH",void 0===n&&(n=Date.now()/1e3),i.results.s2cRate=8*S/1e3/(n-r),i.logger("S2C rate calculated by client: "+i.results.s2cRate),i.logger("S2C rate calculated by server: "+E.ThroughputValue),e.send(i.makeNdtMessage(i.TEST_MSG,String(i.results.s2cRate))),!1;if("WAIT_FOR_TEST_MSG_OR_TEST_FINISH"===T&&_===i.TEST_MSG){var l=E.msg.split(": "),c=l[0],g=l[1].trim();return i.results[c]=g,!1}return"WAIT_FOR_TEST_MSG_OR_TEST_FINISH"===T&&_===i.TEST_FINALIZE?(i.callbacks.onstatechange("finished_s2c",i.results),i.logger("NDT S2C test is complete: "+E.msg),!0):void i.logger("S2C: State = "+T+" type = "+_+"("+i.NDT_MESSAGES[_]+") message = ",E)}},NDTjs.prototype.ndtMetaTest=function(e){var t,s=this,r="WAIT_FOR_TEST_PREPARE";return function(n,o){if("WAIT_FOR_TEST_PREPARE"===r&&n===s.TEST_PREPARE)return s.callbacks.onstatechange("preparing_meta",s.results),r="WAIT_FOR_TEST_START",!1;if("WAIT_FOR_TEST_START"===r&&n===s.TEST_START)return s.callbacks.onstatechange("running_meta",s.results),e.send(s.makeNdtMessage(s.TEST_MSG,"client.os.name:NDTjs")),e.send(s.makeNdtMessage(s.TEST_MSG,"")),r="WAIT_FOR_TEST_FINALIZE",!1;if("WAIT_FOR_TEST_FINALIZE"===r&&n===s.TEST_FINALIZE)return s.callbacks.onstatechange("finished_meta",s.results),s.logger("NDT META test complete."),!0;throw t="Bad state and message combo for META test: "+r+", "+n+", "+o.msg,s.TestFailureException(t)}},NDTjs.prototype.startTest=function(){var e,t,s,r,n,o=[],T=this;this.checkBrowserSupport(),this.logger("Test started.  Waiting for connection to server..."),this.callbacks.onstart(this.server),e=this.createWebsocket(this.serverProtocol,this.server,this.serverPort,this.serverPath,"ndt"),e.onopen=function(){T.logger("Opened connection on port "+T.serverPort),e.send(T.makeLoginMessage(38)),s="LOGIN_SENT"},e.onmessage=function(S){var a,i=T.parseNdtMessage(S.data),_=i[0],E=JSON.parse(i[3]);if(T.logger("type = "+_+" ("+T.NDT_MESSAGES[_]+') body = "'+E.msg+'"'),void 0===t&&o.length>0&&(t=o.pop()),void 0!==t)return T.logger("Calling a subtest"),void(t(_,E)===!0&&(t=void 0,T.logger("Subtest complete")));if("LOGIN_SENT"===s)if(_===T.SRV_QUEUE){if("9990"===E.msg)e.send(T.makeNdtMessage(T.MSG_WAITING,""));else if("9977"===E.msg)throw T.TestFailureException("Server terminated test with SRV_QUEUE 9977");T.logger("Got SRV_QUEUE. Ignoring and waiting for MSG_LOGIN.")}else{if(_!==T.MSG_LOGIN)throw r="Expected type 1 (SRV_QUEUE) or 2 (MSG_LOGIN)but got "+_+" ("+T.NDT_MESSAGES[_]+")",T.TestFailureException(r);"v"!==E.msg[0]&&T.logger("Bad msg "+E.msg),s="WAIT_FOR_TEST_IDS"}else if("WAIT_FOR_TEST_IDS"===s&&_===T.MSG_LOGIN){for(a=E.msg.split(" "),n=a.length-1;n>=0;n-=1)if("2"===a[n])o.push(T.ndtC2sTest());else if("4"===a[n])o.push(T.ndtS2cTest(e));else if("32"===a[n])o.push(T.ndtMetaTest(e));else if(""!==a[n])throw r="Unknown test type: "+a[n],T.TestFailureException(r);s="WAIT_FOR_MSG_RESULTS"}else if("WAIT_FOR_MSG_RESULTS"===s&&_===T.MSG_RESULTS){T.logger(E);var l=E.msg.split("\n");for(n=0;n<l.length;n++){var c=l[n],g=c.split(": "),h=g[0],u=g[1];T.results[h]=u}}else{if("WAIT_FOR_MSG_RESULTS"!==s||_!==T.MSG_LOGOUT)throw r="No handler for message "+_+" in state "+s,T.TestFailureException(r);e.close(),T.callbacks.onstatechange("finished_all",T.results),T.callbacks.onfinish(T.results),T.logger("All tests successfully completed.")}},e.onerror=function(e){throw r=T.parseNdtMessage(e.data)[3].msg,T.TestFailureException(r)}};